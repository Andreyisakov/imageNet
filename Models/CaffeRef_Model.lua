require 'ccn2'
require 'cunn'
local model = nn.Sequential()
model:add(nn.Transpose({1,4},{1,3},{1,2}))
model:add(ccn2.SpatialConvolution(3, 96, 11, 4, 0, 1))
model:add(nn.ReLU())
model:add(ccn2.SpatialMaxPooling(3, 2))
model:add(ccn2.SpatialCrossResponseNormalization(5, 0.0001, 0.75))
model:add(ccn2.SpatialConvolution(96, 256, 5, 1, 2, 2))
model:add(nn.ReLU())
model:add(ccn2.SpatialMaxPooling(3, 2))
model:add(ccn2.SpatialCrossResponseNormalization(5, 0.0001, 0.75))
model:add(ccn2.SpatialConvolution(256, 384, 3, 1, 1, 1))
model:add(nn.ReLU())
model:add(ccn2.SpatialConvolution(384, 384, 3, 1, 1, 2))
model:add(nn.ReLU())
model:add(ccn2.SpatialConvolution(384, 256, 3, 1, 1, 2))
model:add(nn.ReLU())
model:add(ccn2.SpatialMaxPooling(3, 2))
model:add(nn.Transpose({4,1},{4,2},{4,3}))
model:add(nn.View(9216))
model:add(nn.Linear(9216, 4096))
model:add(nn.ReLU())
model:add(nn.Dropout(0.5))
model:add(nn.Linear(4096, 4096))
model:add(nn.ReLU())
model:add(nn.Dropout(0.5))
model:add(nn.Linear(4096, 1000))
model:add(nn.LogSoftMax())
model:cuda()

return model
